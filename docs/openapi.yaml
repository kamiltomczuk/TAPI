openapi: 3.0.0
info:
  title: TAPI - Harry Potter Universe API
  description: |
    # TAPI Documentation
    
    API providing information about characters, spells, and magical creatures from Harry Potter universe.
    
    ## Features
    - Character management
    - Spell catalog
    - Magical creatures database
    
    ## Technologies
    - Node.js
    - Express
    - GraphQL
    - gRPC
    - REST API
    
  version: 1.0.0
  contact:
    name: API Support
    email: support@tapi.com
servers:
  - url: http://localhost:3000
    description: Development server

paths:
  # Character endpoints
  /characters:
    get:
      summary: Get all characters
      responses:
        '200':
          description: A list of characters
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Character'
    post:
      summary: Create a new character
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewCharacter'
      responses:
        '201':
          description: Character created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Character'
        '400':
          description: Invalid input

  /characters/{id}:
    get:
      summary: Get a character by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Character details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Character'
        '404':
          description: Character not found
    put:
      summary: Update a character
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewCharacter'
      responses:
        '200':
          description: Character updated
        '400':
          description: Invalid input
        '404':
          description: Character not found
    delete:
      summary: Delete a character
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Character deleted
        '404':
          description: Character not found
    patch:
      summary: Partially update a character
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CharacterPatch'
      responses:
        '200':
          description: Character partially updated
        '400':
          description: Invalid input
        '404':
          description: Character not found

  /characters/house/{houseName}:
    get:
      summary: Get characters by house
      parameters:
        - name: houseName
          in: path
          required: true
          schema:
            type: string
            enum: [Gryffindor, Slytherin, Hufflepuff, Ravenclaw]
      responses:
        '200':
          description: List of characters in the house
        '404':
          description: House not found

  # Spell endpoints
  /spells:
    get:
      summary: Get all spells
      responses:
        '200':
          description: A list of spells
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Spell'
    post:
      summary: Create a new spell
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewSpell'
      responses:
        '201':
          description: Spell created
        '400':
          description: Invalid input

  /spells/{id}:
    get:
      summary: Get a spell by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Spell details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Spell'
        '404':
          description: Spell not found

  /spells/type/{type}:
    get:
      summary: Get spells by type
      parameters:
        - name: type
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/SpellType'
      responses:
        '200':
          description: List of spells of the specified type

  # Creature endpoints
  /creatures:
    get:
      summary: Get all creatures
      responses:
        '200':
          description: A list of creatures
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Creature'
    post:
      summary: Create a new creature
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewCreature'
      responses:
        '201':
          description: Creature created
        '400':
          description: Invalid input

components:
  schemas:
    Character:
      type: object
      properties:
        id:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        fullName:
          type: string
        house:
          type: string
        bloodStatus:
          type: string
          enum: [PURE_BLOOD, HALF_BLOOD, MUGGLE_BORN, UNKNOWN]
        wand:
          $ref: '#/components/schemas/Wand'
        patronus:
          type: string
        isDeathEater:
          type: boolean
        isOrderMember:
          type: boolean
        role:
          type: string
          enum: [STUDENT, TEACHER, AUROR, MINISTER_OF_MAGIC, DEATH_EATER, ORDER_MEMBER, OTHER]
        birthDate:
          type: string
          format: date
        deathDate:
          type: string
          format: date
        skills:
          type: array
          items:
            $ref: '#/components/schemas/Skill'
        magicalCreatures:
          type: array
          items:
            $ref: '#/components/schemas/CharacterCreatureRelationship'
        friends:
          type: array
          items:
            $ref: '#/components/schemas/Relationship'
        enemies:
          type: array
          items:
            $ref: '#/components/schemas/Relationship'
        notableEvents:
          type: array
          items:
            $ref: '#/components/schemas/Event'
        favoriteSpells:
          type: array
          items:
            type: string

    Spell:
      type: object
      required:
        - name
        - type
      properties:
        id:
          type: string
        name:
          type: string
        type:
          $ref: '#/components/schemas/SpellType'
        description:
          type: string
        level:
          $ref: '#/components/schemas/SpellLevel'
        effect:
          type: string

    SpellType:
      type: string
      enum: [CHARM, CURSE, HEX, JINX, TRANSFIGURATION, OTHER]

    SpellLevel:
      type: string
      enum: [EASY, MEDIUM, HARD, EXTREME]

    Creature:
      type: object
      required:
        - name
        - species
      properties:
        id:
          type: string
        name:
          type: string
        species:
          type: string
        description:
          type: string
        dangerLevel:
          $ref: '#/components/schemas/DangerLevel'
        habitat:
          type: string
        abilities:
          type: array
          items:
            type: string
        knownFor:
          type: string
        isProtected:
          type: boolean
        canTalk:
          type: boolean
        alignment:
          $ref: '#/components/schemas/CreatureAlignment'
        interactions:
          type: array
          items:
            $ref: '#/components/schemas/Interaction'

    DangerLevel:
      type: string
      enum: [HARMLESS, LOW, MODERATE, HIGH, EXTREME]

    CreatureAlignment:
      type: string
      enum: [GOOD, NEUTRAL, EVIL, UNKNOWN]

    Wand:
      type: object
      properties:
        wood:
          type: string
        core:
          type: string
        length:
          type: number
        flexibility:
          type: string

    Skill:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        proficiency:
          type: string
          enum: [NOVICE, INTERMEDIATE, ADVANCED, MASTER]

    CharacterCreatureRelationship:
      type: object
      properties:
        creature:
          type: object
          properties:
            id:
              type: string
            type:
              type: string
        relationshipType:
          type: string
        details:
          type: string

    Relationship:
      type: object
      properties:
        character:
          $ref: '#/components/schemas/CharacterReference'
        relationshipType:
          type: string

    CharacterReference:
      type: object
      properties:
        id:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        fullName:
          type: string
        link:
          type: string

    Event:
      type: object
      properties:
        name:
          type: string
        date:
          type: string
          format: date
        description:
          type: string

    Interaction:
      type: object
      properties:
        characterId:
          type: string
        type:
          type: string
          enum: [FRIENDLY, HOSTILE, NEUTRAL, GUARDIAN, SERVANT]
        description:
          type: string

    NewCharacter:
      type: object
      required:
        - firstName
        - lastName
      properties:
        firstName:
          type: string
        lastName:
          type: string
        house:
          type: string
        bloodStatus:
          type: string
        role:
          type: string

    NewSpell:
      type: object
      required:
        - name
        - type
      properties:
        name:
          type: string
        type:
          $ref: '#/components/schemas/SpellType'
        description:
          type: string
        level:
          $ref: '#/components/schemas/SpellLevel'
        effect:
          type: string

    NewCreature:
      type: object
      required:
        - name
        - species
      properties:
        name:
          type: string
        species:
          type: string
        description:
          type: string
        dangerLevel:
          $ref: '#/components/schemas/DangerLevel'
        habitat:
          type: string
        abilities:
          type: array
          items:
            type: string
        isProtected:
          type: boolean
        canTalk:
          type: boolean
        alignment:
          $ref: '#/components/schemas/CreatureAlignment'

    CharacterPatch:
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
        house:
          type: string
        bloodStatus:
          type: string
        role:
          type: string

tags:
  - name: Characters
    description: Operations about characters
  - name: Spells
    description: Operations about spells
  - name: Creatures
    description: Operations about magical creatures

security:
  - apiKeyAuth: []

components:
  securitySchemes:
    apiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key